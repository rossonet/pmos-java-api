buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.1"
    classpath 'de.undercouch:gradle-download-task:5.3.0'
//    classpath "com.intershop.gradle.wsdl:wsdl-gradle-plugin:3.3.1"
  }
}

description = "Client for ProcessMaker API"
group = 'net.rossonet.pmos'
version = '0.0.1'

ext {
	//sourceCompatibility = 1.8
	ossrhPassword = System.getenv('OSSRH_PASSWORD')
}

repositories {
	mavenCentral()
	jcenter()
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'jacoco'
apply plugin: 'base'
apply plugin: 'distribution'
apply plugin: 'signing'
apply plugin: 'maven-publish'
//apply plugin: "com.intershop.gradle.wsdl"

configurations.all {
  exclude group: 'org.apache.geronimo.specs', module: 'geronimo-stax-api_1.0_spec'
}

dependencies {
  api group: 'net.rossonet.commons', name: 'rossonet-helper', version: '0.3.1'
  api 'org.apache.ws.commons.axiom:axiom-api:1.2.20'
  api 'org.apache.axis2:axis2-kernel:1.8.2'
  api 'org.apache.axis2:axis2-adb:1.7.7'
  api 'org.apache.axis2:axis2-transport-local:1.7.7'
  api 'org.apache.axis2:axis2-transport-http:1.7.7'
  api group: 'org.json', name: 'json', version: '20220924'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
  testImplementation group: 'com.ginsberg', name: 'junit5-system-exit', version: '1.1.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

task eclipseClosedDependencies {}

task eclipseClosedDependencies_ {}

eclipse {
	classpath {
	    downloadJavadoc = true
	    downloadSources = true
	}
}

task view { doLast { println "Working on project ${project.name} [ ${project.description} ]" } }

jar.doLast { task ->
	ant.checksum file: task.archivePath
}

java {
  withJavadocJar()
  withSourcesJar()
}

gitProperties {
	failOnNoGitDirectory = false
	customProperty 'component', "${project.name}"
	dateFormat = "yyyy-MM-dd HH:mm:ssZ"
	dateFormatTimeZone = 'GMT'
}

test {
  useJUnitPlatform()
}

javadoc{
	destinationDir = file("${project.buildDir}/docs/javadoc/${project.name}/")
	failOnError=false
}

task theiaIdeBackend(type: Exec) {
        workingDir "./"
        commandLine 'docker', 'run', '--init', '--rm', '-p', '3000:3000', '-d', '-v', "${projectDir}:/home/project:cached", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendNoCached(type: Exec) {
        workingDir "./"
        commandLine 'docker', 'run', '--init', '--rm', '-p', '3000:3000', '-d', '-v', "${projectDir}:/home/project", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendNoVolume(type: Exec) {
        workingDir "./"
        commandLine 'docker', 'run', '--init', '--rm', '-p', '3000:3000', '-d', '--name', "docker-ide-${project.name}", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendCopy(type: Exec) {
        theiaIdeBackendCopy.dependsOn("theiaIdeBackendNoVolume")
        workingDir "./"
        commandLine 'docker', 'cp', '.', "docker-ide-${project.name}:/home/project/"
}

task theiaIdeBackendStart(type: Exec) {
        description 'Run Theia IDE container with docker'
        theiaIdeBackendStart.dependsOn("theiaIdeBackendCopy")
        group "Theia IDE on Docker Container"
        workingDir "./"
        commandLine 'docker', 'exec', '-u', 'root', "docker-ide-${project.name}", '/bin/chown', '-R', 'theia:theia', '/home/project'
        commandLine 'docker', 'exec', '-u', 'root', "docker-ide-${project.name}", '/bin/chown', '-R', 'theia:theia', '/home/theia'
        doLast { println "\n\n*** You can find the Theia IDE at http://localhost:3000 ***" }
        doLast { println "To shutdown the IDE:\ndocker stop docker-ide-${project.name}\n- save your work on repository before!\n\n" }
}

task printTheiaIdeBackendDockerCommand(type: Exec) {
        workingDir "./"
        commandLine 'echo', 'docker', 'run', '--init', '-p', '3000:3000', '-d', '--name', "docker-ide-${project.name}", 'rossonet/theia-ide:latest'
}

task theiaIdeLocalBrowser(type: Exec) {
        group "Theia IDE on Docker Container"
        description 'Open browser to local Theia IDE'
        workingDir "./"
        commandLine 'xdg-open', 'http://localhost:3000'
}

publishing {
  publications {
    mavenJava(MavenPublication){
      artifactId = "${project.name}"
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = "${project.name}"
        description = "${project.description}"
        url = 'https://app.rossonet.net/'
        licenses {
          license {
            name = 'Apache-2.0 license'
            url = 'https://www.apache.org/licenses/LICENSE-2.0'
          }
        }
        developers {
          developer {
            id = 'ar4k'
            name = 'Andrea Ambrosini'
            email = 'andrea.ambrosini@rossonet.org'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/rossonet/TemplateCommons.git'
          developerConnection = 'scm:git:ssh://github.com:rossonet/TemplateCommons.git'
          url = 'https://github.com/rossonet/TemplateCommons/tree/master'
        }
      }
    }
  }
  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      name = "sonatype"
      credentials {
        username "rossonet"
        password "${ossrhPassword}"
      }
    }
  }
}

signing {
    sign publishing.publications.mavenJava
}
/*
wsdl {
    axis2 {
        pmos3ClientFromWsdl {
            wsdlFile = file("${projectDir}/src/main/resources/pmos3.x_wsdl2.xml")
            serverSide = false
            allPorts = true
            serviceDescription = true
            packageName = 'net.rossonet.pmos.client3.generated'
            databindingMethod = 'adb'
	    generateTestcase = false
        }
    }
}
*/